/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,18],$V2=[1,4],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,17],$Vd=[1,16],$Ve=[1,28],$Vf=[1,31],$Vg=[1,29],$Vh=[1,30],$Vi=[1,32],$Vj=[2,22],$Vk=[6,40],$Vl=[1,35],$Vm=[1,36],$Vn=[1,41],$Vo=[1,42],$Vp=[1,38],$Vq=[1,40],$Vr=[1,37],$Vs=[1,39],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,48],$Vy=[6,32,36,39,40,49,55,57],$Vz=[1,49],$VA=[1,51],$VB=[1,60],$VC=[1,65],$VD=[1,68],$VE=[1,67],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,83],$VJ=[1,92],$VK=[1,93],$VL=[6,40,55],$VM=[6,7,32,33,40,49,50],$VN=[1,111],$VO=[1,119],$VP=[2,42],$VQ=[1,149],$VR=[1,150],$VS=[1,189],$VT=[1,236];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"statements":4,"statement":5,";":6,"NEWLINE":7,"COMMENT":8,"empty":9,"expression":10,"variable":11,"attribution":12,"value":13,"function":14,"function_definition":15,"function_call":16,"branch":17,"return":18,"ERRORS":19,"ERRORL":20,"FLOAT":21,"INT":22,"CHARACTER":23,"LOGIC":24,"SC":25,"STRING":26,"NONE":27,"VAR":28,"IDENTIFIER":29,":":30,"tip":31,",":32,"<-":33,"<":34,"BOOL":35,"+":36,"FOR":37,"FROM":38,"TO":39,"GO":40,"END":41,"OF":42,"LOOP":43,"WHEN":44,"FUNCTION":45,"SUM":46,"LP":47,"parameters":48,"RP":49,"->":50,"START":51,"PRINT":52,"GETPID":53,"IF":54,"THEN":55,"ELSE":56,"*":57,">":58,"RETURN":59,"$accept":0,"$end":1},
terminals_: {2:"error",6:";",7:"NEWLINE",8:"COMMENT",19:"ERRORS",20:"ERRORL",21:"FLOAT",22:"INT",23:"CHARACTER",24:"LOGIC",25:"SC",26:"STRING",27:"NONE",28:"VAR",29:"IDENTIFIER",30:":",32:",",33:"<-",34:"<",35:"BOOL",36:"+",37:"FOR",38:"FROM",39:"TO",40:"GO",41:"END",42:"OF",43:"LOOP",44:"WHEN",45:"FUNCTION",46:"SUM",47:"LP",49:"RP",50:"->",51:"START",52:"PRINT",53:"GETPID",54:"IF",55:"THEN",56:"ELSE",57:"*",58:">",59:"RETURN"},
productions_: [0,[3,1],[4,4],[4,2],[4,3],[4,4],[4,1],[9,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[11,6],[11,5],[11,3],[11,4],[11,4],[11,4],[11,6],[11,8],[11,7],[11,5],[11,6],[31,1],[31,1],[31,1],[31,1],[12,4],[12,5],[12,3],[12,4],[14,13],[14,11],[14,8],[14,9],[15,9],[15,6],[15,17],[15,14],[15,18],[15,13],[15,13],[16,6],[16,3],[16,10],[48,5],[48,3],[17,9],[17,14],[10,5],[10,3],[10,3],[10,3],[10,3],[10,3],[18,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                    $$[$0] = $$[$0].reverse();
                    return {
                        id: "script",
                        statements: $$[$0],
                        line: yylineno + 1
                    };
                
break;
case 2:

                                            $$[$0].push($$[$0-3]);
                                            this.$ = $$[$0];
                                        
break;
case 3:

                                            this.$ = [];
                                            this.$.push($$[$0-1]);
                                        
break;
case 4: case 5:

                                            this.$ = $$[$0];
                                        
break;
case 7:

                        this.$= [];
                        this.$.push({
                            type: "empty"
                        });
                    
break;
case 17:

                        return {
                            error: "syntax",
                            line: yylineno + 1,
                            text: ",",
                            "token": "\",\"",
                            expected: [
                                "\";\"",
                                "\"+\"",
                                "\"-\"",
                                "\"*\"",
                                "\"/\"",
                                "\"%\"",
                                "\">\"",
                                "\"<\"",
                                "\".\"",
                                "\"==\"",
                                "\"!=\"",
                                "\"<=\"",
                                "\">=\"",
                                "\"OR\"",
                                "\"XOR\"",
                                "\"AND\""]
                        };
                    
break;
case 18:

                        return {
                            error: "lexical",
                            line: yylineno + 1,
                            text: "Lexical error on line " + (yylineno+1) + ": Unrecognized text.\n\n Erroneous area:\n1: #Lexical error#\n2: " + $$[$0] + ";\n^..^"
                        };
                    
break;
case 19:

                        this.$ = {
                            id: "value",
                            type: "real",
                            value: parseFloat($$[$0]),
                            line: yylineno + 1
                        };
                    
break;
case 20:

                        this.$ = {
                            id: "value",
                            type: "int",
                            value: parseInt($$[$0]),
                            line: yylineno + 1
                        };
                    
break;
case 21: case 24:

                        this.$ = {
                            id: "value",
                            type: "character",
                            value: JSON.parse($$[$0]),
                            line: yylineno + 1
                        };
                    
break;
case 23:

                        this.$ = {
                            id: "value",
                            type: "logic",
                            value: JSON.parse($$[$0]),
                            line: yylineno + 1
                        };
                    
break;
case 25:

                        this.$ = {
                            id: "value",
                            type: "string",
                            value: JSON.parse($$[$0]),
                            line: yylineno + 1
                        };
                    
break;
case 26:

                        this.$ = {
                            id: "value",
                            type: $$[$0],
                            line: yylineno + 1
                        };
                    
break;
case 27:

                                                        $$[$0].push({
                                                            type: $$[$0-2],
                                                            title: $$[$0-4],
                                                            line: yylineno + 1
                                                        });
                                                        this.$ = {
                                                            id: "var",
                                                            elements: $$[$0].reverse(),
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 28:

                                                        $$[$0].push({
                                                            type: $$[$0-2],
                                                            title: $$[$0-4],
                                                            line: yylineno + 1
                                                        });
                                                        this.$ = $$[$0];
                                                    
break;
case 29:

                                                        this.$ = [];
                                                        this.$.push({
                                                            type: $$[$0],
                                                            title: $$[$0-2],
                                                            line: yylineno + 1
                                                        });
                                                    
break;
case 30:

                                                        this.$ = {
                                                            id: "var",
                                                            elements: [{
                                                                type: $$[$0],
                                                                title: $$[$0-2],
                                                                line: yylineno + 1
                                                            }],
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 31:

                                                        this.$ = {
                                                            id: "var",
                                                            elements: [{
                                                                type: "auto",
                                                                title: $$[$0-2],
                                                                value: {
                                                                    id: "value",
                                                                    type: $$[$0].type,
                                                                    value: $$[$0].value,
                                                                    line: yylineno + 1
                                                                },
                                                                line: yylineno + 1
                                                            }],
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 32:

                                                        return {
                                                            error: "syntax",
                                                            line: yylineno + 1,
                                                            text: $$[$0-1],
                                                            token: "\"<\"",
                                                            expected: [
                                                                "\":\"",
                                                                "\"ASSIGN\""
                                                            ]
                                                        };
                                                    
break;
case 33:

                                                        this.$ = {
                                                            id: "var",
                                                            elements: [{
                                                                type: $$[$0-2],
                                                                title: $$[$0-4],
                                                                value: $$[$0],
                                                                line: yylineno + 1
                                                            }],
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 34:

                                                        $$[$0].push({
                                                            type: $$[$0-4],
                                                            title: $$[$0-6],
                                                            value: {
                                                                id: "value",
                                                                type: $$[$0-2].type,
                                                                value: $$[$0-2].value,
                                                                line: yylineno + 1
                                                            },
                                                            line: yylineno + 1
                                                        });
                                                        this.$ = {
                                                            id: "var",
                                                            elements: $$[$0].reverse(),
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 35:

                                                        $$[$0].push({
                                                            type: $$[$0-4],
                                                            title: $$[$0-6],
                                                            value: {
                                                                id: "value",
                                                                type: $$[$0-2].type,
                                                                value: $$[$0-2].value,
                                                                line: yylineno + 1
                                                            },
                                                            line: yylineno + 1
                                                        });
                                                        this.$ = $$[$0];
                                                    
break;
case 36:

                                                        this.$ = [];
                                                        this.$.push({
                                                            type: $$[$0-2],
                                                            title: $$[$0-4],
                                                            value: {
                                                                id: "value",
                                                                type: $$[$0].type,
                                                                value: $$[$0].value,
                                                                line: yylineno + 1
                                                            },
                                                            line: yylineno + 1
                                                        });
                                                    
break;
case 37:

                                                        this.$ = {
                                                            id: "var",
                                                            elements: [{
                                                                type: $$[$0-2],
                                                                title: $$[$0-4],
                                                                value: {
                                                                    id: "value",
                                                                    type: $$[$0].type,
                                                                    value: $$[$0].value,
                                                                    line: yylineno + 1
                                                                },
                                                                line: yylineno + 1
                                                            }],
                                                            line: yylineno + 1
                                                        };
                                                    
break;
case 42:

                                                this.$ = {
                                                    id: "attr",
                                                    to: {
                                                        id: "identifier",
                                                        title: $$[$0-2],
                                                        line: yylineno + 1
                                                    },
                                                    from: {
                                                        id: "value",
                                                        type: $$[$0].type,
                                                        value: $$[$0].value,
                                                        line: yylineno + 1
                                                    },
                                                    line: yylineno + 1
                                                };
                                            
break;
case 43:

                                                this.$ = {
                                                    id: "attr",
                                                    to: {
                                                        id: "identifier",
                                                        title: $$[$0-4],
                                                        line: yylineno + 1
                                                    },
                                                    from: {
                                                        id: "expr",
                                                        op: $$[$0-1],
                                                        left: {
                                                            id: "identifier",
                                                            title: $$[$0-2],
                                                            line: yylineno + 1
                                                        },
                                                        right: {
                                                            id: "value",
                                                            type: $$[$0].type,
                                                            value: $$[$0].value,
                                                            line: yylineno + 1
                                                        },
                                                        line: yylineno + 1
                                                    },
                                                    line: yylineno + 1
                                                };
                                            
break;
case 44:

                                this.$ = {
                                    id: "attr",
                                    to: {
                                        id: "identifier",
                                        title: $$[$0-2],
                                        line: yylineno + 1
                                    },
                                    from: $$[$0],
                                    line: yylineno + 1
                                };
                            
break;
case 45:

    this.$ = {
        id: "attr",
        to: {
            id: "identifier",
            title: $$[$0-2],
            line: yylineno + 1
        },
        from: $$[$0],
        line: yylineno + 1
    };    

break;
case 46:

                                                                                    this.$ = {
                                                                                        id: "for",
                                                                                        variable: $$[$0-10],
                                                                                        from: {
                                                                                            id: "value",
                                                                                            type: $$[$0-8].type,
                                                                                            value: $$[$0-8].value,
                                                                                            line: yylineno - 1
                                                                                        },
                                                                                        to: {
                                                                                            id: "value",
                                                                                            type: $$[$0-6].type,
                                                                                            value: $$[$0-6].value,
                                                                                            line: yylineno - 1
                                                                                        },
                                                                                        statements: [$$[$0-3]],
                                                                                        line: yylineno + 1
                                                                                    };
                                                                                
break;
case 47:

                                                                                    this.$ = {
                                                                                            id: "for",
                                                                                            variable: $$[$0-8],
                                                                                            exp: {
                                                                                                id: "identifier",
                                                                                                title: $$[$0-6],
                                                                                                line: yylineno - 1
                                                                                            },
                                                                                            statements: [$$[$0-3]],
                                                                                            line: yylineno + 1
                                                                                        };
                                                                                
break;
case 48:

                                                                                    this.$ = {
                                                                                        id: "loop_when",
                                                                                        exp: $$[$0],
                                                                                        statements: [$$[$0-4]],
                                                                                        line: yylineno + 1
                                                                                    };
                                                                                
break;
case 49:

    this.$ = {
        id: "loop_go",
        exp: $$[$0-6],
        statements: [$$[$0-3]],
        line: yylineno + 1
    };

break;
case 50:

                                                                this.$ = {
                                                                    id: "function_def",
                                                                    title: $$[$0-6],
                                                                    parameters: $$[$0-4],
                                                                    return_type: $$[$0-1],
                                                                    statements: [{
                                                                            type: "empty"
                                                                    }],
                                                                    line: yylineno + 1
                                                                };
                                                            
break;
case 51:

                                                                this.$ = {
                                                                    id: "function_def",
                                                                    title: $$[$0-4],
                                                                    return_type: $$[$0-2],
                                                                    parameters: [],
                                                                    statements: [$$[$0]],
                                                                    line: yylineno + 1
                                                                };
                                                            
break;
case 52:

                                                                this.$ = {
                                                                    id: "function_def",
                                                                    title: $$[$0-15],
                                                                    parameters: [],
                                                                    return_type: $$[$0-13],
                                                                    statements: [$$[$0-9], $$[$0-6], $$[$0-3]],
                                                                    line: yylineno + 1
                                                                };
                                                            
break;
case 53:

                                                                                                    this.$ = {
                                                                                                        id: "function_def",
                                                                                                        title: $$[$0-12],
                                                                                                        parameters: $$[$0-10],
                                                                                                        return_type: $$[$0-7],
                                                                                                        statements: [$$[$0-3]],
                                                                                                        line: yylineno + 1
                                                                                                    };
                                                                                                
break;
case 54:

                                                                                                                                this.$ = {
                                                                                                                                    id: "function_def",
                                                                                                                                    title: $$[$0-15],
                                                                                                                                    parameters: $$[$0-13],
                                                                                                                                    return_type: $$[$0-10],
                                                                                                                                    statements: [$$[$0-6], $$[$0-3]],
                                                                                                                                    line: yylineno + 1
                                                                                                                                };
                                                                                                                            
break;
case 55:

                                                                                            this.$ = {
                                                                                                id: "function_def",
                                                                                                title: $$[$0-11],
                                                                                                parameters: $$[$0-9],
                                                                                                return_type: $$[$0-6],
                                                                                                statements: $$[$0-2],
                                                                                                line: yylineno + 1
                                                                                            };
                                                                                        
break;
case 56:

                                                                                            this.$ = {
                                                                                                id: "function_def",
                                                                                                title: $$[$0-11],
                                                                                                parameters: $$[$0-9],
                                                                                                return_type: $$[$0-6],
                                                                                                statements: [$$[$0-3]],
                                                                                                line: yylineno + 1
                                                                                            };
                                                                                        
break;
case 57:

                                    this.$ = {
                                        id: "function_call",
                                        function: $$[$0-5],
                                        parameters: {
                                            [$$[$0-3]]: $$[$0-1]
                                        },
                                        line: yylineno + 1
                                    };
                                
break;
case 58:

                                    this.$ = {
                                        id: "function_call",
                                        function: $$[$0-2],
                                        parameters: [],
                                        line: yylineno + 1
                                    };
                                
break;
case 59:

    this.$ = {
        id: "function_call",
        function: $$[$0-9],
        parameters: {
            [$$[$0-7]]: $$[$0-5],
            [$$[$0-3]]: $$[$0-1]
        },
        line: yylineno + 1
    };

break;
case 60:

                                            $$[$0].push({
                                                type: $$[$0-2],
                                                name: $$[$0-4]
                                            });
                                            this.$ = $$[$0].reverse();
                                        
break;
case 61:

                                            this.$ = [];
                                            this.$.push({
                                                type: $$[$0],
                                                name: $$[$0-2]
                                            });
                                        
break;
case 62:

                                                                    this.$ = {
                                                                        id: "if_then",
                                                                        exp: $$[$0-6],
                                                                        then: [$$[$0-3]],
                                                                        line: yylineno + 1
                                                                    };
                                                                
break;
case 63:

    this.$ = {
        id: "if_then",
        exp: $$[$0-11],
        then: [$$[$0-8]],
        else: [$$[$0-3]],
        line: yylineno + 1
    };

break;
case 64:

                                this.$ = {
                                    id: "expr",
                                    op: $$[$0-3],
                                    left: {
                                        id: "value",
                                        type: $$[$0-4].type,
                                        value: $$[$0-4].value,
                                        line: yylineno + 1
                                    },
                                    right: {
                                        id: "expr",
                                        op: $$[$0-1],
                                        left: {
                                            id: "value",
                                            type: $$[$0-2].type,
                                            value: $$[$0-2].value,
                                            line: yylineno + 1
                                        },
                                        right: {
                                            id: "value",
                                            type: $$[$0].type,
                                            value: $$[$0].value,
                                            line: yylineno + 1
                                        },
                                        line: yylineno + 1
                                    },
                                    line: yylineno + 1
                                };
                            
break;
case 65:

                                this.$ = {
                                    id: "expr",
                                    op: $$[$0-1],
                                    left: {
                                        id: "value",
                                        type: $$[$0-2].type,
                                        value: $$[$0-2].value,
                                        line: yylineno + 1
                                    },
                                    right: {
                                        id: "identifier",
                                        title: $$[$0],
                                        line: yylineno + 1
                                    },
                                    line: yylineno + 1
                                };
                            
break;
case 66: case 68:

                                this.$ = {
                                    id: "expr",
                                    op: $$[$0-1],
                                    left: {
                                        id: "identifier",
                                        title: $$[$0-2],
                                        line: yylineno + 1
                                    },
                                    right: $$[$0],
                                    line: yylineno + 1
                                };
                            
break;
case 67:

                                this.$ = {
                                    id: "expr",
                                    op: $$[$0-1],
                                    left: {
                                        id: "identifier",
                                        title: $$[$0-2],
                                        line: yylineno + 1
                                    },
                                    right: {
                                        id: "value",
                                        type: $$[$0].type,
                                        value: $$[$0].value,
                                        line: yylineno + 1
                                    },
                                    line: yylineno + 1
                                };
                            
break;
case 69:

                                this.$ = {
                                    id: "expr",
                                    op: $$[$0-1],
                                    left: {
                                        id: "identifier",
                                        title: $$[$0-2],
                                        line: yylineno + 1
                                    },
                                    right: {
                                        id: "identifier",
                                        title: $$[$0],
                                        line: yylineno + 1
                                    },
                                    line: yylineno + 1
                                };
                            
break;
case 70:

                                this.$ = {
                                    id: "return",
                                    value: {
                                        id: "identifier",
                                        title: $$[$0],
                                        line: yylineno + 1
                                    },
                                    line: yylineno + 1
                                };
                            
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:$V1,8:$V2,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{1:[3]},{1:[2,1]},{6:[1,33]},o([6,36,57],$Vj,{7:[1,34]}),{1:[2,6]},o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11],{36:$Vl,57:$Vm}),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o([1,7],[2,7]),{30:$Vn,33:$Vo,34:$Vp,36:$Vq,57:$Vr,58:$Vs},{29:[1,43]},{29:$Vt,37:$Vu,43:$Vv,45:$Vw,54:$Vx},o($Vy,[2,17]),o($Vy,[2,18]),o($Vy,[2,19]),o($Vy,[2,20]),o($Vy,[2,21]),o($Vy,[2,23]),o($Vy,[2,24]),o($Vy,[2,25]),o($Vy,[2,26]),{29:$Vz,46:[1,50],52:$VA},{47:[1,52]},{47:[1,53]},{47:[1,54]},{29:[1,55]},{1:[2,3],7:[1,56]},{4:57,5:3,6:$V0,7:[1,58],8:$V2,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{8:$VB,13:59,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{29:[1,61]},{8:$VB,13:62,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:63,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:64,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{29:$VC},{21:$VD,22:$VE,26:$VF,31:66,35:$VG},{8:$VB,10:72,13:73,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,29:$VH},{30:[1,74],33:[1,75],34:[1,76]},{33:[1,77]},{29:[1,78]},{5:80,7:[1,79],8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{46:[1,81]},{8:$VB,10:82,13:73,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,29:$VI},{30:[1,84]},{47:[1,85]},{47:[1,86]},{29:[1,87]},{49:[1,88]},{29:[1,89]},o($Vk,[2,70]),{4:90,5:3,6:$V0,7:$V1,8:$V2,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{1:[2,4]},{4:91,5:3,6:$V0,7:$V1,8:$V2,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$VJ,37:$Vu,43:$Vv,45:$VK,46:$Vf,52:$Vg,53:$Vh,54:$Vx,59:$Vi},{57:[1,94]},o($Vy,$Vj),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,69]),o($Vk,[2,29],{32:[1,95],33:[1,96]}),o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),{34:$Vp,36:[1,97],57:$Vr,58:$Vs},o($Vk,[2,44]),{36:$Vl,57:$Vm},{21:$VD,22:$VE,26:$VF,31:98,35:$VG},{8:$VB,13:99,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:100,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:101,16:102,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,46:$Vf,52:$Vg,53:$Vh},{38:[1,103],42:[1,104]},{5:105,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$VJ,37:$Vu,43:$Vv,45:$VK,46:$Vf,52:$Vg,53:$Vh,54:$Vx,59:$Vi},{40:[1,106]},{47:[1,107]},{55:[1,108]},{34:$Vp,36:$Vq,57:$Vr,58:$Vs},{21:$VD,22:$VE,26:$VF,31:109,35:$VG},{29:$VN,48:110},{29:$VN,48:112},{30:[1,113]},o($Vk,[2,58]),{30:[1,114]},{1:[2,2]},{1:[2,5]},{30:$Vn,33:[1,115],34:$Vp,36:$Vq,57:$Vr,58:$Vs},{29:$Vz,46:[1,116],52:$VA},{8:$VB,13:117,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{11:118,28:$Vc,29:$VO},{8:$VB,13:120,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:121,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,29:$VC},o($Vk,[2,30],{32:[1,122],33:[1,123]}),o($Vk,[2,31]),o($Vk,[2,32]),o($Vk,$VP),o($Vk,[2,45]),{8:$VB,13:124,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{29:[1,125]},{6:[1,126]},{7:[1,127]},{29:$VN,48:128},{7:[1,129]},{7:[1,131],50:[1,130]},{49:[1,132]},{30:[1,133]},{49:[1,134]},{8:$VB,13:135,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,13:136,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{8:$VB,10:72,13:137,16:102,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,29:$VH,46:$Vf,52:$Vg,53:$Vh},{47:[1,138]},o($VL,[2,64]),o($Vk,[2,28]),{30:$Vn},o($Vk,[2,36],{32:[1,139]}),o($Vk,[2,43]),{11:140,28:$Vc,29:$VO},{8:$VB,10:141,13:142,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,29:$VI},{39:[1,143]},{40:[1,144]},{7:[1,145]},{5:146,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{49:[1,147]},{7:$VQ,12:148,29:$VR},{8:$VB,13:151,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{51:[1,152]},{30:[1,153]},{21:$VD,22:$VE,26:$VF,31:154,35:$VG},{30:[1,155]},{49:[1,156]},{32:[1,157]},o($Vk,$VP,{36:$Vl,57:$Vm}),{29:$VN,48:158},{11:159,28:$Vc,29:$VO},o($Vk,[2,27]),o($Vk,[2,33]),o($Vk,[2,37],{32:[1,160],36:$Vl,57:$Vm}),{8:$VB,13:161,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{7:[1,162]},{44:[1,163]},{6:[1,164]},{30:[1,165]},{6:[1,166]},{29:$Vt},{33:$Vo},o($Vk,[2,51]),{7:[1,167]},{21:$VD,22:$VE,26:$VF,31:168,35:$VG},{32:[1,169],49:[2,61]},{21:$VD,22:$VE,26:$VF,31:170,35:$VG},o($Vk,[2,57]),{29:[1,171]},{49:[1,172]},o($Vk,[2,35]),{11:173,28:$Vc,29:$VO},{40:[1,174]},{5:175,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{5:176,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{7:[1,177]},{21:$VD,22:$VE,26:$VF,31:178,35:$VG},{7:[1,179]},{5:180,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{7:[1,181]},{29:$VN,48:182},{7:[1,183]},{30:[1,184]},{30:[1,185]},o($Vk,[2,34]),{7:[1,186]},{6:[1,187]},o($Vk,[2,48]),{41:[1,188]},{7:[1,190],50:$VS},{41:[1,191],56:[1,192]},{6:[1,193]},{51:[1,194]},{49:[2,60]},{51:[1,195]},{8:$VB,13:196,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb},{21:$VD,22:$VE,26:$VF,31:197,35:$VG},{5:198,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{7:[1,199]},o($Vk,[2,49]),o($Vk,[2,50]),{51:[1,200]},o($Vk,[2,62]),{7:[1,201]},{7:[1,202]},{7:[1,203]},{5:205,7:[1,204],8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{49:[1,206]},{7:[1,207],50:$VS},{6:[1,208]},{41:[1,209]},{7:[1,210]},{7:$VQ,12:211,29:$VR},{5:212,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{5:213,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{6:$V0,9:214,29:$Vt,37:$Vu,43:$Vv,45:$Vw,54:$Vx},{6:[1,215]},o($Vk,[2,59]),{51:[1,216]},{7:[1,217]},o($Vk,[2,47]),{5:218,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{6:[1,219]},{6:[1,220]},{6:[1,221]},{7:[1,222]},{7:[1,223]},{7:[1,224]},{41:[1,225]},{6:[1,226]},{7:[1,227]},{7:[1,228]},{7:[1,229]},{41:[1,230]},{41:[1,231]},{5:232,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},o($Vk,[2,46]),{7:[1,233]},{41:[1,234]},{5:235,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{41:$VT},o($Vk,[2,55]),o($Vk,[2,56]),{6:[1,237]},{5:238,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},o($Vk,[2,63]),{6:[1,239]},o($Vk,[2,53]),{7:[1,240]},{6:[1,241]},{7:[1,242]},{5:238,7:$V1,8:$VB,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,41:$VT,45:$Ve,46:$Vf,52:$Vg,53:$Vh,59:$Vi},{7:[1,243]},{41:[1,244]},{41:[1,245]},o($Vk,[2,52]),o($Vk,[2,54])],
defaultActions: {2:[2,1],5:[2,6],57:[2,4],90:[2,2],91:[2,5],182:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 57; 
break;
case 1: return '/'; 
break;
case 2: return 36; 
break;
case 3: return 50; 
break;
case 4: return '-'; 
break;
case 5: return 22; 
break;
case 6: return 21; 
break;
case 7: return 24; 
break;
case 8: return 24; 
break;
case 9: return 35; 
break;
case 10: return 23; 
break;
case 11: return 26; 
break;
case 12: return 27; 
break;
case 13: return 6; 
break;
case 14: return 30; 
break;
case 15: return 33; 
break;
case 16: return 34; 
break;
case 17: return 58; 
break;
case 18: return 32; 
break;
case 19: return 47; 
break;
case 20: return 49; 
break;
case 21: return 37; 
break;
case 22: return 41; 
break;
case 23: return 38; 
break;
case 24: return 39; 
break;
case 25: return 40; 
break;
case 26: return 42; 
break;
case 27: return 43; 
break;
case 28: return 44; 
break;
case 29: return 45; 
break;
case 30: return 51; 
break;
case 31: return 59; 
break;
case 32: return 52; 
break;
case 33: return 53; 
break;
case 34: return 46; 
break;
case 35: return 54; 
break;
case 36: return 55; 
break;
case 37: return 56; 
break;
case 38: return 7; 
break;
case 39: 
break;
case 40: return 19; 
break;
case 41: return 20; 
break;
case 42: return 21; 
break;
case 43: return 22; 
break;
case 44: return 24; 
break;
case 45: return 23; 
break;
case 46: return 25; 
break;
case 47: return 26; 
break;
case 48: return 8; 
break;
case 49: return 27; 
break;
case 50: return 29; 
break;
case 51: return 28; 
break;
}
},
rules: [/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:->)/,/^(?:-)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:bool\b)/,/^(?:character\b)/,/^(?:string\b)/,/^(?:none\b)/,/^(?:;)/,/^(?::)/,/^(?:<-)/,/^(?:<)/,/^(?:>)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:for\b)/,/^(?:end\b)/,/^(?:from\b)/,/^(?:to\b)/,/^(?:go\b)/,/^(?:of\b)/,/^(?:loop\b)/,/^(?:when\b)/,/^(?:function\b)/,/^(?:start\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:getpid\b)/,/^(?:sum\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:(\r?\n))/,/^(?:([ \t]))/,/^(?:([0-9]+,[0-9]+))/,/^(?:(\^[0-9]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:{LOGIC})/,/^(?:("[A-Za-z0-9]"))/,/^(?:("\\""))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:(#[A-Za-z0-9\s\.*]*#))/,/^(?:{NONE})/,/^(?:([a-z(0-9)*]+))/,/^(?:(@[var]+))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}